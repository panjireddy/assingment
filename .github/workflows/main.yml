on: [push]

jobs:
  icav_assign_job:
    runs-on: ubuntu-latest
    name: ICAV_Asssingment
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: Validating the step
        uses: ./ # Uses an action in the root directory
        id: hello
      # Use the output from the `hello` step
      - name: Get the output
        run: echo "The Result was ${{ steps.hello.outputs.res }}"
      - name: Build and push Docker images
        uses: docker/build-push-action@v1
        with:
          username: testreganji
          password: 1YGgoNgnsgw2EjuNsACXylt=8EKJ2x/r
          registry: testreganji.azurecr.io
          repository: testreganji
          tags: latest
      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ./kubeConfig  
        id: setcontext
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ""
        with:
         args:  create -f mainfests/deployment.yml

